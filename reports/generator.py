import os
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.utils import ImageReader
from reportlab.platypus import Table, TableStyle
import matplotlib.pyplot as plt

def generate_report(data: dict, output_path="reports/threat_report.pdf"):
    os.makedirs("reports", exist_ok=True)
    width, height = A4
    pdf = canvas.Canvas(output_path, pagesize=A4)

    # ===== HEADER =====
    pdf.setTitle("Threat Intelligence Report")
    pdf.setFont("Helvetica-Bold", 22)
    pdf.setFillColor(colors.darkblue)
    pdf.drawString(50, height - 60, "ðŸ§  Threat Intelligence Report")

    # Mini logos (local or URL)
    try:
        import urllib.request
        python_logo_url = "https://upload.wikimedia.org/wikipedia/commons/c/c3/Python-logo-notext.svg"
        shield_logo_url = "https://upload.wikimedia.org/wikipedia/commons/8/8e/OOjs_UI_icon_shield.svg"
        python_logo = ImageReader(urllib.request.urlopen(python_logo_url))
        shield_logo = ImageReader(urllib.request.urlopen(shield_logo_url))
        pdf.drawImage(python_logo, width - 120, height - 70, width=50, height=50, mask='auto')
        pdf.drawImage(shield_logo, width - 60, height - 70, width=40, height=50, mask='auto')
    except Exception:
        pass  # logo yoksa hata verme

    # ===== META INFO =====
    pdf.setFillColor(colors.black)
    pdf.setFont("Helvetica", 12)
    pdf.drawString(50, height - 100, f"Generated: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}")
    pdf.drawString(50, height - 115, "Report Type: Combined Threat Data (IP / Domain / Email)")

    # ===== DATA TABLE =====
    table_data = [["Field", "Value"]]
    for key, value in data.items():
        table_data.append([key, str(value or "â€”")])

    table = Table(table_data, colWidths=[150, 350])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
    ]))

    table.wrapOn(pdf, width, height)
    table.drawOn(pdf, 50, height - 300)

    # ===== RISK SCORE GRAPH =====
    # Simulated risk levels (placeholder logic)
    scores = {
        "IP Risk": len(data.get("ip", "")) * 5 % 100,
        "Domain Risk": len(data.get("domain", "")) * 7 % 100,
        "Email Risk": len(data.get("email", "")) * 9 % 100
    }

    fig, ax = plt.subplots(figsize=(4, 2))
    ax.bar(scores.keys(), scores.values(), color=['orange', 'red', 'green'])
    ax.set_title("Risk Score Overview", fontsize=10)
    ax.set_ylabel("Risk %")
    ax.set_ylim(0, 100)
    chart_path = "reports/temp_chart.png"
    plt.tight_layout()
    plt.savefig(chart_path, dpi=120)
    plt.close()

    try:
        pdf.drawImage(chart_path, 80, height - 480, width=400, height=150)
    except Exception:
        pass

    # ===== FOOTER =====
    pdf.setFont("Helvetica-Oblique", 9)
    pdf.setFillColor(colors.grey)
    pdf.drawString(50, 40, "Confidential - Generated by Threat Intelligence Dashboard Â© 2025")
    pdf.drawString(50, 28, "Analyst: Ozgur | System version 2.0 | AI Assisted Report")

    pdf.save()
    if os.path.exists(chart_path):
        os.remove(chart_path)

    return output_path
