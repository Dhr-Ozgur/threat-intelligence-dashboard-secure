import os
import pandas as pd
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.pdfgen import canvas
from reportlab.platypus import Table, TableStyle, Image
from reportlab.lib.units import cm


def _save_chart(df, x, y, title, filename):
    """Create a chart safely"""
    if df is None or df.empty or x not in df.columns or y not in df.columns:
        return None
    df = df.copy()
    df[y] = pd.to_numeric(df[y], errors="coerce").fillna(0)
    os.makedirs("reports", exist_ok=True)
    path = f"reports/{filename}.png"
    plt.figure(figsize=(6, 3.5))
    plt.bar(df[x].astype(str), df[y], color="#005EB8")
    plt.title(title, fontsize=11, weight="bold")
    plt.xticks(rotation=30, ha="right", fontsize=8)
    plt.tight_layout()
    plt.savefig(path, dpi=200)
    plt.close()
    return path


def _add_table(c, df, y):
    """Render DataFrame as a styled table"""
    df = df.fillna("-")
    cols = list(df.columns[:5])
    data = [cols] + df[cols].head(10).astype(str).values.tolist()
    col_width = max(3.0, 16 / len(cols)) * cm
    table = Table(data, colWidths=[col_width] * len(cols))
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#003366")),
        ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
        ("ALIGN", (0, 0), (-1, -1), "LEFT"),
        ("GRID", (0, 0), (-1, -1), 0.3, colors.grey),
        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
        ("FONTSIZE", (0, 0), (-1, -1), 8),
    ]))
    w, h = table.wrap(0, 0)
    table.drawOn(c, 2 * cm, y - h)
    return y - h - 1 * cm


def _draw_logo(c):
    """Add mini logos"""
    try:
        logo_path = "frontend/assets/logo.png"  # varsa
        if os.path.exists(logo_path):
            c.drawImage(logo_path, 17 * cm, 26.5 * cm, width=2 * cm, height=2 * cm)
    except Exception:
        pass


def _add_risk_chart(c, total_score):
    """Add overall risk chart at the end"""
    plt.figure(figsize=(2.5, 2.5))
    plt.pie([total_score, 100 - total_score], colors=["#D72638", "#CCCCCC"], startangle=90)
    plt.title(f"Overall Risk: {total_score:.0f}%", fontsize=10, weight="bold")
    plt.savefig("reports/overall_risk.png", dpi=150)
    plt.close()
    c.drawImage("reports/overall_risk.png", 8 * cm, 3 * cm, width=6 * cm, height=6 * cm)


def build_pdf(df_ip=None, df_dom=None, df_em=None, output_path="reports/threat_report.pdf"):
    os.makedirs("reports", exist_ok=True)
    c = canvas.Canvas(output_path, pagesize=A4)
    width, height = A4
    y = height - 3 * cm

    # HEADER
    _draw_logo(c)
    c.setFont("Helvetica-Bold", 18)
    c.setFillColor(colors.HexColor("#003366"))
    c.drawString(2 * cm, y, "Threat Intelligence Report")
    c.setFillColor(colors.black)
    c.setFont("Helvetica", 10)
    c.drawString(2 * cm, y - 0.5 * cm, datetime.utcnow().strftime("Generated at %Y-%m-%d %H:%M UTC"))
    y -= 1.5 * cm

    def add_section(title, df, x_col, y_col):
        nonlocal y
        if df is None or df.empty:
            return
        if y < 10 * cm:
            c.showPage()
            y = height - 3 * cm
        c.setFont("Helvetica-Bold", 13)
        c.setFillColor(colors.HexColor("#005EB8"))
        c.drawString(2 * cm, y, title)
        y -= 0.8 * cm

        chart_path = _save_chart(df, x_col, y_col, title, title.replace(" ", "_"))
        if chart_path and os.path.exists(chart_path):
            c.drawImage(chart_path, 2 * cm, y - 6 * cm, width=14 * cm, height=5 * cm)
            y -= 6.5 * cm

        y = _add_table(c, df, y)

    # SECTIONS
    add_section("IP Analysis", df_ip, "ip", "abuseConfidenceScore")
    add_section("Domain Analysis", df_dom, "domain", "malicious")
    add_section("Email Breach Analysis", df_em, "email_masked", "count")

    # FINAL RISK SCORE
    ip_score = df_ip["abuseConfidenceScore"].mean() if df_ip is not None and "abuseConfidenceScore" in df_ip else 0
    dom_score = df_dom["malicious"].mean() if df_dom is not None and "malicious" in df_dom else 0
    em_score = df_em["count"].mean() if df_em is not None and "count" in df_em else 0
    total = min(100, (ip_score + dom_score + em_score) / 3)
    _add_risk_chart(c, total)

    # FOOTER
    c.setFont("Helvetica-Oblique", 9)
    c.setFillColor(colors.grey)
    c.drawString(2 * cm, 1.5 * cm, "Generated by Threat Intelligence Dashboard (Secure Edition)")
    c.save()
    return output_path
